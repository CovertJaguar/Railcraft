constructVersion()
rootProject.ext.version_minecraft = version_minecraft
rootProject.ext.version_forge = version_forge
rootProject.ext.version_mcp = version_mcp
rootProject.ext.version_forestry = version_forestry
rootProject.ext.version_industrialcraft = version_industrialcraft

task echoVersion << {
    printNextVersion()
}

def constructVersion() {
    rootProject.version = version_project_major + '.' + version_project_series + '.' + version_project_revision
    if (version_project_qualifier != 'none') {
        rootProject.version = rootProject.version + '-' + version_project_qualifier + '-' + version_project_build
    }
    if (!rootProject.hasProperty('official')) {
        rootProject.version = rootProject.version + "-unofficial"
    }
}

def saveVersion() {
    ant.propertyfile(
            file: "gradle.properties") {
        entry(key: "version_project_major", type: "int", value: version_project_major)
        entry(key: "version_project_series", type: "int", value: version_project_series)
        entry(key: "version_project_revision", type: "int", value: version_project_revision)
        entry(key: "version_project_build", type: "int", value: version_project_build)
    }
    constructVersion()
    printNextVersion()
}

def printNextVersion() {
    println '*************************************************************'
    println 'The next build will be version: ' + rootProject.version
    println '*************************************************************'
}

task bumpMajor << {
    project.version_project_major = Integer.parseInt(project.version_project_major) + 1
    project.version_project_series = "0"
    project.version_project_revision = "0"
    project.version_project_build = "0"
    saveVersion()
}

task bumpSeries << {
    project.version_project_series = Integer.parseInt(project.version_project_series) + 1
    project.version_project_revision = "0"
    project.version_project_build = "0"
    saveVersion()
}

task bumpRevision << {
    project.version_project_revision = Integer.parseInt(project.version_project_revision) + 1
    project.version_project_build = "0"
    saveVersion()
}

task bumpBuild << {
    project.version_project_build = Integer.parseInt(project.version_project_build) + 1
    saveVersion()
}

task setBuild << {
    def console = System.console()
    if (console) {
        project.version_project_build = console.readLine('> What should the build be? ')
    } else {
        logger.error "Cannot get console."
    }
    saveVersion()
}

task release << {
    project.version_project_build = Integer.parseInt(project.version_project_build) + 1
    saveVersion()
}