def api = parent.project(":api:railcraft")

evaluationDependsOn(api.path)

ext {
    version_minecraft = api.ext.version_minecraft
    version_forge = api.ext.version_forge
    version_mcp = api.ext.version_mcp
}
constructVersion()
parent.ext.version_minecraft = version_minecraft
parent.ext.version_forge = version_forge
parent.ext.version_mcp = version_mcp
parent.ext.version_forestry = version_forestry
parent.ext.version_industrialcraft = version_industrialcraft
parent.ext.version_buildcraft = version_buildcraft

task echoVersion {
    doLast {
        printNextVersion()
    }
}

def constructVersion() {
    parent.version = version_project_major + '.' + version_project_series + '.' + version_project_revision
    if (version_project_qualifier != 'none') {
        parent.version = parent.version + '-' + version_project_qualifier + '-' + version_project_build
    }
    if (!parent.hasProperty('official')) {
        parent.version = parent.version + "-unofficial"
    }
}

def saveVersion() {
    ant.propertyfile(
            file: "gradle.properties") {
        entry(key: "version_project_major", type: "int", value: version_project_major)
        entry(key: "version_project_series", type: "int", value: version_project_series)
        entry(key: "version_project_revision", type: "int", value: version_project_revision)
        entry(key: "version_project_build", type: "int", value: version_project_build)
    }
    constructVersion()
    printNextVersion()
}

def printNextVersion() {
    println '*************************************************************'
    println 'The next build will be version: ' + parent.version
    println '*************************************************************'
}

task bumpMajor {
    doLast {
        project.version_project_major = Integer.parseInt(project.version_project_major) + 1
        project.version_project_series = "0"
        project.version_project_revision = "0"
        project.version_project_build = "0"
        saveVersion()
    }
}

task bumpSeries {
    doLast {
        project.version_project_series = Integer.parseInt(project.version_project_series) + 1
        project.version_project_revision = "0"
        project.version_project_build = "0"
        saveVersion()
    }
}

task bumpRevision {
    doLast {
        project.version_project_revision = Integer.parseInt(project.version_project_revision) + 1
        project.version_project_build = "0"
        saveVersion()
    }
}

task bumpBuild {
    doLast {
        project.version_project_build = Integer.parseInt(project.version_project_build) + 1
        saveVersion()
    }
}

task setBuild {
    doLast {
        def console = System.console()
        if (console) {
            project.version_project_build = console.readLine('> What should the build be? ')
        } else {
            logger.error "Cannot get console."
        }
        saveVersion()
    }
}

task release {
    doLast {
        project.version_project_build = Integer.parseInt(project.version_project_build) + 1
        saveVersion()
    }
}