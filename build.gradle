evaluationDependsOn(':version')

buildscript {
	repositories {
		mavenCentral()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
	}
}

apply plugin: 'forge'


group = "mods.railcraft" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Railcraft_" + project.mcversion

ext.apiRailcraft = "./api/railcraft"
ext.apiForestry = "./api/forestry"
ext.apiRedstoneFlux = "./api/redstoneflux"

ext.dirLang = "./lang"

ext.dirDest = './build/dist'

minecraft {
	version = project.mcversion + "-" + project.forgeversion
	runDir = "run"

	replace '@VERSION@', project.version
}

sourceSets {
	main {
		java {
			srcDir project.apiRailcraft
			srcDir project.apiForestry
			srcDir project.apiRedstoneFlux + "/src/main/java"
			exclude '**/forestry/api/apiculture/**'
			exclude '**/forestry/api/arboriculture/**'
			exclude '**/forestry/api/circuits/**'
			exclude '**/forestry/api/core/**'
			exclude '**/forestry/api/farming/**'
			exclude '**/forestry/api/food/**'
			exclude '**/forestry/api/fuels/**'
			exclude '**/forestry/api/genetics/**'
			exclude '**/forestry/api/lepidopterology/**'
			exclude '**/forestry/api/mail/**'
			exclude '**/forestry/api/world/**'
		}
		resources {
			srcDir project.dirLang
		}
	}
}

repositories {
	maven {
		name = "ic2"
		url = "http://maven.ic2.player.to/"
	}
}

configurations{
	api
	compile.extendsFrom api
}

dependencies {
	api 'net.industrial-craft:industrialcraft-2:2.2.575-experimental:api'
	api 'com.mod-buildcraft:buildcraft:6.0.17+:dev'
}

processResources
{
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and mcversion
		expand 'version':project.version, 'mcversion':project.minecraft.version
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
		exclude '**/*.md'
	}
}

runClient {
	if( project.hasProperty('mcUsername') && project.hasProperty('mcPassword') ) {
		args "--username=${project.mcUsername}"
		args "--password=${project.mcPassword}"
	}

}

debugClient {
	if( project.hasProperty('mcUsername') && project.hasProperty('mcPassword') ) {
		args "--username=${project.mcUsername}"
		args "--password=${project.mcPassword}"
	}
}

jar {
	destinationDir = file("build/tmp")
	archiveName = "main.jar"

	from {
		configurations.api.collect {
			it.isDirectory() ? it : zipTree(it).matching {
				include '**/api/**'
				exclude '**/buildcraft/api/blueprints/**'
				exclude '**/buildcraft/api/filler/**'
				exclude '**/ic2/api/crops/**'
				exclude '**/ic2/api/network/**'
				exclude '**/ic2/api/event/**'
				exclude '**/ic2/api/reactor/**'
			}
		}
	}

	into ('mods/railcraft/api') {
		from project.apiRailcraft + "/LICENSE.md"
	}
	into ('forestry/api') {
		from project.apiForestry + "/LICENSE.txt"
	}
	into ('cofh/api') {
		from project.apiRedstoneFlux + "/LICENSE - LGPLv3.txt"
	}
}

task mainJarSigned ( type: Jar, dependsOn: 'reobf' ) {
	from (zipTree(jar.getArchivePath())) {
		exclude '**/api/**'
	}

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	destinationDir = file("build/tmp")
	archiveName = "signed.jar"

	doLast {
		if (project.hasProperty('signingKeystore')) {
			ant.signjar(jar: getArchivePath(),
				alias: signingAlias,
				keystore: signingKeystore,
				storepass: signingStorepass)
		} else {
			println 'Signing disabled, gradle.properties is missing.'
		}
	}
}

task mainJar ( type: Zip, dependsOn: mainJarSigned ) {
	from (zipTree(mainJarSigned.getArchivePath())) {
		include '**'
	}

	from (zipTree(jar.getArchivePath())) {
		include '**'
		exclude '**/uristqwerty/**'
	}

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	destinationDir = file(dirDest)
	includeEmptyDirs = false
	extension = 'jar'
}

task devJarSigned ( type: Jar, dependsOn: 'classes' ) {
	from(sourceSets.main.output) {
		exclude '**/api/**'
	}

	destinationDir = file("build/tmp")
	archiveName = "signed-dev.jar"

	doLast {
		if (project.hasProperty('signingKeystore')) {
			ant.signjar(jar: getArchivePath(),
				alias: signingAlias,
				keystore: signingKeystore,
				storepass: signingStorepass)
		} else {
			println 'Signing disabled, gradle.properties is missing.'
		}
	}
}

task devJar ( type: Zip, dependsOn: devJarSigned ) {
	from (zipTree(devJarSigned.getArchivePath())) {
		include '**'
	}

	from(sourceSets.main.allSource) {
		include '**/api/**'
	}

	from(sourceSets.main.output) {
		include '**'
	}

	from {
		configurations.api.collect {
			it.isDirectory() ? it : zipTree(it).matching {
				include '**/api/**'
				exclude '**/buildcraft/api/blueprints/**'
				exclude '**/buildcraft/api/filler/**'
				exclude '**/ic2/api/crops/**'
				exclude '**/ic2/api/network/**'
				exclude '**/ic2/api/event/**'
				exclude '**/ic2/api/reactor/**'
			}
		}
	}

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	destinationDir = file(dirDest)
	extension = 'jar'

	classifier = 'dev'
}

task apiZip ( type: Zip ) {
	from project.apiRailcraft
	destinationDir = file(dirDest)
	classifier = 'api'
	extension = 'zip'
}

task releaseInit << {
	println '*************************************************************'
	println 'This build will be version: ' +  rootProject.version
	println '*************************************************************'
}

task release << {
}

release.dependsOn releaseInit, mainJar, devJar, apiZip
mainJar.shouldRunAfter releaseInit
devJar.shouldRunAfter releaseInit
apiZip.shouldRunAfter releaseInit
release.shouldRunAfter uploadArchives

artifacts {
	archives mainJar, devJar, apiZip
}
