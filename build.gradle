evaluationDependsOn(':version')

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath fileTree(dir: 'libs', include: '*.jar')
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "com.headlamp-games" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Railcraft_" + project.version_minecraft

ext.apiRailcraft = "./api/railcraft"
// ext.apiForestry = "./api/forestry"
// ext.apiRedstoneFlux = "./api/redstoneflux"
// ext.apiThaumcraft = "./api/thaumcraft"
// ext.apiBuildcraft = "./api/buildcraft"

ext.dirLang = "./lang"

ext.dirDest = './build/distributions'

minecraft {
    version = project.version_minecraft + "-" + project.version_forge
    runDir = "run"

    mappings = project.version_mcp.replace("-", "_");

    replace '@VERSION@', project.version
    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

sourceSets {
    main {
        resources {
            srcDir project.dirLang
            exclude '**/Thumbs.db'
        }
    }
    api {
        java {
            srcDir project.apiRailcraft
            // srcDir project.apiRedstoneFlux + "/src/main/java"
            // srcDir project.apiThaumcraft
        }
        // java {
        // srcDir project.apiBuildcraft + "/api"
        // exclude 'cofh/**'
        // }
    }
}

repositories {
    mavenCentral()
    maven {
        name = "forestry"
        url = "http://maven.ic2.player.to/"
    }
    maven {
        name = "ic2"
        url = "http://maven.ic2.player.to/"
    }
    maven {
        name = "jei"
        url = "http://dvs1.progwml6.com/files/maven/"
    }
}

configurations {
    api
    compile.extendsFrom api
}

dependencies {
    api "net.sengir.forestry:forestry_${project.version_minecraft}:${project.version_forestry}:api"
    runtime "net.sengir.forestry:forestry_${project.version_minecraft}:${project.version_forestry}"
    api "net.industrial-craft:industrialcraft-2:${project.version_industrialcraft}:api"
    runtime "net.industrial-craft:industrialcraft-2:${project.version_industrialcraft}"
    compile "org.jetbrains:annotations:15.0"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "version_minecraft", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and version_minecraft
        expand 'version': project.version, 'version_minecraft': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude '**/*.md'
        exclude '**/Thumbs.db'
    }
}

runClient {
    if (project.hasProperty('mcUsername') && project.hasProperty('mcPassword')) {
        args "--username=${project.mcUsername}"
        args "--password=${project.mcPassword}"
    }
    outputs.upToDateWhen { false }
}

jar {
    from(sourceSets.api.output) {
        include '**/mods/railcraft/api/**'
        include '**/cofh/api/**'
        exclude '**/uristqwerty/**'
        exclude '**/buildcraft/**'
        exclude '**/thaumcraft/**'
    }

    from {
        configurations.api.collect {
            it.isDirectory() ? it : zipTree(it).matching {
                include '**/ic2/api/energy/**'
                include '**/ic2/api/info/**'
                include '**/ic2/api/item/**'
                include '**/ic2/api/recipe/**'
                exclude '**/ic2/**/package-info.java'
                exclude '**/ic2/**/package-info.class'
            }
        }
    }

    exclude '**/Thumbs.db'

    into('mods/railcraft/api') {
        from project.apiRailcraft + "/LICENSE.md"
    }
//    into('forestry/api') {
//        from project.apiForestry + "/LICENSE.txt"
//    }
//    into('thaumcraft/api') {
//        from "./src/api/java/thaumcraft/api/LICENSE.txt"
//    }
    into('cofh/api') {
        from "./src/api/java/cofh/api/LICENSE - LGPLv3.txt"
    }
//    into('buildcraft/api') {
//        from "./src/api/java/buildcraft/api/LICENSE.API"
//    }

    destinationDir = file(dirDest)
    includeEmptyDirs = false
}

task devJar(type: Jar, dependsOn: 'classes') {
    from(sourceSets.main.output) {
        include '**'
    }

    from(sourceSets.api.output) {
        include '**/mods/railcraft/api/**'
        include '**/cofh/api/**'
        exclude '**/uristqwerty/**'
        exclude '**/buildcraft/**'
        exclude '**/thaumcraft/**'
    }

    from {
        configurations.api.collect {
            it.isDirectory() ? it : zipTree(it).matching {
                include '**/ic2/api/energy/**'
                include '**/ic2/api/info/**'
                include '**/ic2/api/item/**'
                include '**/ic2/api/recipe/**'
                exclude '**/ic2/**/package-info.java'
                exclude '**/ic2/**/package-info.class'
            }
        }
    }

    exclude '**/Thumbs.db'

    destinationDir = file(dirDest)
    includeEmptyDirs = false

    extension = 'jar'
    classifier = 'dev'
}

class JarSigner extends net.minecraftforge.gradle.tasks.SignJar {
    public JarSigner() {
        onlyIf {
            project.hasProperty('signingStorepass')
        }

        exclude '**/api/**'

        alias = 'CovertJaguar'
        if (project.hasProperty('signingStorepass')) {
            storePass = project.signingStorepass
            keyPass = project.signingStorepass
            keyStore = System.getProperty("user.home") + '/.keystore'
        }
    }
}

task signMainJar(type: JarSigner, dependsOn: 'jar') {
    inputFile = jar.getArchivePath()
    outputFile = jar.getArchivePath()
}

task signDevJar(type: JarSigner, dependsOn: 'devJar') {
    inputFile = devJar.getArchivePath()
    outputFile = devJar.getArchivePath()
}

task apiZip(type: Zip) {
    from project.apiRailcraft
    destinationDir = file(dirDest)
    classifier = 'api'
    extension = 'zip'
}

task releaseInit {
    doLast {
        println '*************************************************************'
        println 'This build will be version: ' + rootProject.version
        println '*************************************************************'
    }
}

task release {
}

build.dependsOn signMainJar, signDevJar, apiZip
releaseInit.dependsOn clean
release.dependsOn releaseInit, build
build.shouldRunAfter releaseInit
uploadArchives.shouldRunAfter releaseInit, build
release.shouldRunAfter uploadArchives

if (project.hasProperty("ftpUsername"))
    uploadArchives {
        repositories {
            ivy {
                url "sftp://ftp.railcraft.info:22/home2/railcraf/public_html/ivy"
                credentials {
                    username project.ftpUsername
                    password project.ftpPassword
                }
                layout 'gradle'
            }
        }
    }

artifacts {
    archives apiZip
    archives devJar
    archives jar
}

idea.module.inheritOutputDirs = true

task wrapper(type: Wrapper) {
    gradleVersion = "2.7"
}
